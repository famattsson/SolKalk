@using Data
@using System.Resources
@using System.Globalization
@using System.Drawing;
@using System.Collections
@using Resources;

@model HandledMunicipalData
@{
    Dictionary<string, double> PowerDict = new Dictionary<string, double>();
    Dictionary<string, Dictionary<string, double>> monthPowerDict = new Dictionary<string, Dictionary<string, double>>();
    List<string> Kommuner = new List<string>() { "Aneby", "Tranås", "Nässjö", "Eksjö", "Vetlanda", "Sävsjö", "Värnamo", "Gislaved", "Gnosjö", "Vaggeryd", "Jönköping", "Habo", "Mullsjö" };

    var month = "";
    foreach (var elem in Kommuner)
    {
        PowerDict.Add(elem, 0);
    }
    foreach (var elem in Model.powerChartRecords)
    {
        if ((bool?)Session["perInhabitant"] == true)
        {
            PowerDict[elem.Kommun] += Math.Round(elem.Energi);

        }
        else
        {
            PowerDict[elem.Kommun] += Math.Round(elem.Energi / 1000);
        }
    }
    //Sort PowerDict by value
    var PowerArr = PowerDict.ToList();
    PowerArr.Sort((pair1, pair2) => pair1.Value.CompareTo(pair2.Value));

    Dictionary<string, double> tempPowerDict = new Dictionary<string, double>();
    foreach (var elem in Model.powerChartRecords)
    {
        if (elem.Month != month)
        {
            tempPowerDict.Clear();
            foreach (var elem1 in Kommuner)
            {
                tempPowerDict.Add(elem1, 0);
            }
        }

        if ((bool?)Session["perInhabitant"] == true)
        {
            tempPowerDict[elem.Kommun] += Math.Round(elem.Energi);
        }
        else
        {
            tempPowerDict[elem.Kommun] += Math.Round(elem.Energi / 1000);
        }

        monthPowerDict[elem.Month] = new Dictionary<string, double>(tempPowerDict);
        month = elem.Month;
    }


}


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    google.charts.load("current", { packages: ['corechart'] });
    google.charts.setOnLoadCallback(drawChart);
    var data = null;
    var chart = null;
    var options = null;
    var ModelJson = @Html.Raw(Json.Encode(Model.powerChartRecords));
    var monthSummedList = []
    var perInhabitant;
    var activeMuni;
   
    @if ((bool?)Session["perInhabitant"] == true)
    {
        <text>
            perInhabitant = true;
        </text>
    }
    else if ((bool?)Session["perInhabitant"] == false)
    {
        <text>
            perInhabitant = false;
        </text>
    }

    @foreach (var monthelem in monthPowerDict)

    {
        foreach (var record in monthelem.Value)
        {
            <text>
                monthSummedList.push({
                    month: "@monthelem.Key",
                    energy: @record.Value,
                    municipality: he.decode("@record.Key"),
                })
            </text>
        }
    }
    ModelJson.sort(function(a, b){
        return a.Energi - b.Energi;
    });
    monthSummedList.sort(function (a, b) {
        return a.energy - b.energy;
    });
    $("[type='number']").keypress(function (evt) {
        evt.preventDefault();
    });
    $(window).resize(function () {
        chart.draw(data, options);
    })


    function drawChart() {
        data = new google.visualization.DataTable();

        data.addColumn("string", "Kommun");
        @if ((bool?)Session["perInhabitant"] == true) { <text>data.addColumn("number", "Wh");</text> }
        else { <text>data.addColumn("number", "kWh");</text> }data.addColumn({type:'string', role: "style" });

        @foreach (var elem in PowerArr)
        {
            <text>
                var name = he.decode("@elem.Key");
                if (name == he.decode("@((string)Session["kommun"])")){
                    data.addRow([name, @elem.Value, 'rgb(58, 145, 63)']);
                } else { data.addRow([name, @elem.Value, 'rgb(161, 216, 132)'])}
            </text>
        }
        @if ((bool?)Session["perInhabitant"] == true)
        {
            <text>
            options = {
                title: "Producerad energi per invånare i alla kommuner (Wh)",
                bar: { groupWidth: "80%" },
                legend: { position: "none" },
                animation:
                {
                    duration: 750,
                    easing: 'out'
                },
            //series: { 0: { color: 'green' } },
            vAxis: { minValue: 0, maxValue: 0}
            };
            </text>
            
        }
        else
        {
            <text>
            options = {
                title: "Producerad energi i alla kommuner (kWh)",

            bar: { groupWidth: "80%" },
            legend: { position: "none" },
            animation:
                {
                    duration: 750,
                easing: 'out'
            },
            //series: { 0: { color: 'green' } },
            vAxis: { minValue: 0, maxValue: 0 }
            };
            </text>
        }
        chart = new google.visualization.ColumnChart(document.getElementById("columnchart_values"));
        chart.draw(data, options);
    }
    function changeChart() {
        var timeInput = document.getElementById("timeInput");
        var timeUnit = timeInput.value;
        data.removeRows(0, data.getNumberOfRows());
        if (timeUnit < 10) {
            timeUnit = "0" + timeUnit;
        }
        if ("@Session["chosenACtion"]" == "ShowPowerOfMonth") {
            for (var i = 0; i < ModelJson.length; i++) {
                if (ModelJson[i].Day == timeUnit) {
                    if (perInhabitant) {
                        if (ModelJson[i].Kommun == he.decode("@((string)Session["kommun"])")) {
                            data.addRow([ModelJson[i].Kommun, Math.round(ModelJson[i].Energi), 'rgb(58, 145, 63)']);
                        } else data.addRow([ModelJson[i].Kommun, Math.round(ModelJson[i].Energi), 'rgb(161, 216, 132)']);
                    }
                    else {
                        if (ModelJson[i].Kommun == he.decode("@((string)Session["kommun"])")) {
                            data.addRow([ModelJson[i].Kommun, Math.round(ModelJson[i].Energi /1000), 'rgb(58, 145, 63)'])
                        } else data.addRow([ModelJson[i].Kommun, Math.round(ModelJson[i].Energi/1000), 'rgb(161, 216, 132)']);
                    }

                }
            }

        }
        else if ("@Session["chosenACtion"]" == "ShowPowerOfYear") {
            for (var i = 0; i < monthSummedList.length; i++) {
                if (monthSummedList[i].month == timeUnit) {
                    if (perInhabitant) {
                        if (monthSummedList[i].municipality == he.decode("@((string)Session["kommun"])")) {
                            data.addRow([monthSummedList[i].municipality, Math.round(monthSummedList[i].energy), 'rgb(58, 145, 63)']);
                        } else data.addRow([monthSummedList[i].municipality, Math.round(monthSummedList[i].energy), 'rgb(161, 216, 132)']);
                    }
                    else {
                        if (monthSummedList[i].municipality == he.decode("@((string)Session["kommun"])")) {
                            data.addRow([monthSummedList[i].municipality, Math.round(monthSummedList[i].energy), 'rgb(58, 145, 63)']);
                        } else data.addRow([monthSummedList[i].municipality, Math.round(monthSummedList[i].energy), 'rgb(161, 216, 132)']);
                    }
                }

            }

        }

        chart.draw(data, options)
    }

</script>

@helper DisplayActive()
    {
        if ((string)Session["chosenACtion"] == "ShowPowerOfYear")
        {
            <li class="active"><a class="tabtext" href="/Municipality/ShowPowerOfYear"> Senaste året </a></li>
        }
        else if ((string)Session["chosenACtion"] != "ShowPowerOfYear")
        {
            <li><a class="tabtext" href="/Municipality/ShowPowerOfYear"> Senaste året </a></li>
        }
        if ((string)Session["chosenACtion"] == "ShowPowerOfMonth")
        {
            <li class="active"><a class="tabtext" href="/Municipality/ShowPowerOfMonth"> Senaste månaden </a></li>
        }
        else if ((string)Session["chosenACtion"] != "ShowPowerOfMonth")
        {
            <li><a class="tabtext" href="/Municipality/ShowPowerOfMonth"> Senaste månaden </a></li>
        }
        if ((string)Session["chosenACtion"] == "ShowPowerOfDay")
        {
            <li class="active"><a class="tabtext" href="/Municipality/ShowPowerOfDay"> Igår </a></li>
        }
        else if ((string)Session["chosenACtion"] != "ShowPowerOfDay")
        {
            <li><a class="tabtext" href="/Municipality/ShowPowerOfDay"> Igår </a></li>
        }
}

@helper RandomizeEq(double totalenergi, char prefix)
    {

        string omvandling = "";
        double times = 0;
        if (prefix == 'k')
        {
                    omvandling = " koppar kaffe bryggd i en kaffebryggare";
                    times = 0.04;
        }
        else if (prefix == 'c')
        {
                    omvandling = " mil i en elbil";
                    times = 0.0015;
        }
        else if (prefix == 'h')
        {
                    omvandling = " års upvärmning av en genomsnittlig svensk villa";
                    times = 0.00000066;
        }


        if (totalenergi * times > 1000000)
        {
            if (Math.Round(totalenergi * times / 1000000) == 1)
            {
                omvandling = " miljon" + omvandling;
            }
            else
            {
                omvandling = " miljoner" + omvandling;
            }

            @Math.Round(((totalenergi) * times) / 1000000, 0)@omvandling
        }
        else if (totalenergi * times > 1000)
        {
            double first = Math.Round((totalenergi * times) / 1000, 0);
            double last = Math.Round(totalenergi * times - (first * 1000),0);
            char space = ' ';
            @first@space@last@omvandling
            
        }
        else if (totalenergi * times < 1000)
        {
            @Math.Round((totalenergi) * times, 1)@omvandling
        }
}

@helper DisplayEnergy()
    {
        double totalenergi = 0;
        foreach (var elem in Model.powerRecords)
        {
            totalenergi += elem.Energi;
        }
        if (totalenergi > 1000000000)
        {
            <h2> @Math.Round(totalenergi / 1000000000, 2) GWh</h2>
            <div>
                @ShowIcons('h')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'h')</h4>
            </div>

            <div>
                <br/><br/>
                @ShowIcons('c')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'c')</h4>
            </div>
           
            <div>
                <br/><br/>
                @ShowIcons('k')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'k')</h4>
            </div>
 
        }
        else if (totalenergi > 1000000)
        {
            <h2> @Math.Round(totalenergi / 1000000, 2) MWh</h2>
            <div>
                @ShowIcons('h')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'h')</h4>
            </div>

            <div>
                <br/><br/>
                @ShowIcons('c')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'c')</h4>
            </div>
           
            <div>
                <br/><br/>
                @ShowIcons('k')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'k')</h4>
            </div>
        }
        else if (totalenergi > 1000)
        {
            <h2> @Math.Round(totalenergi / 1000, 1) kWh</h2>
            <div>
                @ShowIcons('h')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'h')</h4>
            </div>

            <div>
                <br/><br/>
                @ShowIcons('c')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'c')</h4>
            </div>
           
            <div>
                <br/><br/>
                @ShowIcons('k')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'k')</h4>
            </div>
        }
        else if (totalenergi < 1000 && totalenergi > 0)
        {
            <h2> @Math.Round(totalenergi) Wh </h2>
            <div>
                @ShowIcons('h')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'h')</h4>
            </div>

            <div>
                <br/><br/>
                @ShowIcons('c')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'c')</h4>
            </div>
           
            <div>
                <br/><br/>
                @ShowIcons('k')
                <h4 style="color:gray; display:inline">Eller @RandomizeEq(totalenergi, 'k')</h4>
            </div>
        }
        else if (totalenergi <= 0)
        {
            <h2> Ingen data tillgänglig ännu. Återkom efter kl. 10:30 </h2>
        }
}

@helper GenerateDropdownContents()
    {
        List<string> Kommuner = new List<string>() { "Aneby", "Gnosjö", "Tranås", "Nässjö", "Eksjö", "Vetlanda", "Sävsjö", "Värnamo", "Gislaved", "Vaggeryd", "Jönköping", "Habo", "Mullsjö", "Hela Länet" };

        foreach (var elem in Kommuner)
        {
            if (elem == "Hela Länet")
            {
                <li> <a href="/Municipality/ChooseMunicipality/"> @elem </a>  </li>
            }
            else
            {
                <li> <a href="/Municipality/ChooseMunicipality/@elem"> @elem </a>  </li>
            }
        }
}

@helper DisplayComparison()
    {
        <div id="columnchart_values" style="max-width:700px; min-height:500px"></div>
    }

@helper DisplaySVGMap()
    {
        ResourceSet resourceSet = Resources.ResourceManager.GetResourceSet(CultureInfo.CurrentCulture, true, true);
        <svg style=" padding-top:10px; max-height:300px" version="1.1" viewBox="0 0 317.5 317.5" xmlns="http://www.w3.org/2000/svg" xlmns:xlink="http://www.w3.org/1999/xlink">
            <g transform="translate(82.124 203.78)" stroke-width="5.1371">
                @foreach (DictionaryEntry resource in resourceSet)
                {
                    if (resource.Value is string)
                    {
                        if ((string)Session["kommun"] == (string)resource.Key)
                        {
                            if ((bool?)Session["options"] != false)
                            {
                                <a xlink:href="/Municipality/ChooseMunicipality/">
                                    <title id="title">@resource.Key</title>
                                    <path fill="rgb(58, 145, 63)" d="@resource.Value" />
                                </a>
                            }
                            else
                            {
                                <a xlink:href="#">
                                    <title id="title">@resource.Key</title>
                                    <path fill="rgb(58, 145, 63)" d="@resource.Value" />
                                </a>
                            }
                        }
                        else
                        {
                            if ((bool?)Session["options"] != false)
                            {
                                <a xlink:href="/Municipality/ChooseMunicipality/@((string)resource.Key)">
                                    <title id="title">@resource.Key</title>
                                    <path fill="rgb(161, 216, 132)" d="@resource.Value" />
                                </a>
                            }
                            else
                            {
                                <a xlink:href="#">
                                    <title id="title">@resource.Key</title>
                                    <path fill="rgb(161, 216, 132)" d="@resource.Value" />
                                </a>
                            }
                        }
                    }
                }
            </g>
        </svg>
}

@helper Timeinput()
    {
        if ((string)Session["chosenAction"] == "ShowPowerOfYear")
        {
            <span class="text-info"> Välj månad i det senaste året: </span> <input class="form-control" min="@Model.powerRecords.Min(x => x.Month)" max="@Model.powerRecords.Max(x => x.Month)" onchange="changeChart()" type="number" id="timeInput" style="max-width: 75px" />
        }
        if ((string)Session["chosenAction"] == "ShowPowerOfMonth")
        {
            <span class="text-info"> Välj dag i den senaste månaden: </span> <input class="form-control" min="@Model.powerRecords.Min(x => x.Day)" max="@Model.powerRecords.Max(x => x.Day)" onchange="changeChart()" type="number" id="timeInput" style="max-width: 75px" />
        }
        if ((string)Session["chosenAction"] == "ShowPowerOfDay")
        {
            <div style="padding-top:54px"></div>
        }
    }

@helper DisplayWeatherQuality()
    {
        int maxWeatherRating = 5;
        ImageConverter converter = new ImageConverter();
        Bitmap sunImg = Resources.sun;
        byte[] imagebytes = (byte[])converter.ConvertTo(sunImg, typeof(byte[]));
        int weatherRating = Model.weatherRating;
        List<int> weatherRatingInts = new List<int>();

        for (var i = 0; i < maxWeatherRating; i++)
        {
            if (weatherRating - 100 >= 0)
            {
                <img src="@String.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(imagebytes))" class="img-responsive" style="filter: grayscale(0%); margin-right:5px; display:inline; max-width:35px; max-height:35px" />
                weatherRating -= 100;
            }
            else
            {
                <img src="@String.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(imagebytes))" class="img-responsive" style="filter: grayscale(@(100-weatherRating)%); margin-right:5px; display:inline; max-width:35px; max-height:35px" />
                weatherRating = 0;
            }
        }
}

@helper PerInhabitantButton()
    {
        if ((bool?)Session["perInhabitant"] == true)
        {
            <a class="btnmunicipal btn btn-info" role="button" href="/Municipality/PerInhabitant/false"> Se Totalt </a>
        }
        else
        {
            <a class="btnmunicipal btn btn-info" role="button" href="/Municipality/PerInhabitant/true"> Se Per Invånare </a>
        }
}

@helper ShowIcons(char prefix)
{
    ImageConverter imageConverter = new ImageConverter();
    Image image = Resources.sun;
    byte[] imageBytes = (byte[])imageConverter.ConvertTo(image, typeof(byte[]));

    if (prefix == 'c'){
        imageBytes = (byte[])imageConverter.ConvertTo(Resources.car, typeof(byte[]));
        <img src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageBytes))" style="display:inline; float:left; width: 50px; height:50px" class="footerimg img-responsive" />
    }

    else if (prefix == 'h'){
        imageBytes = (byte[])imageConverter.ConvertTo(Resources.house, typeof(byte[]));
        <img src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageBytes))" style="display:inline; float:left; width: 50px; height:50px" class="footerimg img-responsive" />
    }    

    else if (prefix == 'k'){
        imageBytes = (byte[])imageConverter.ConvertTo(Resources.coffee, typeof(byte[]));
        <img src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageBytes))" style="display:inline; float:left; width: 50px; height:50px" class="footerimg img-responsive" />
    }
}

<div class="row container">
    <div class="row">
        <div class=" col-sm-4" style="padding-left:50px; padding-bottom:10px">
            @if (((bool?)Session["compare"] == false || (bool?)Session["compare"] == null) && (bool?)Session["options"] != false)
            {
                <div class="dropdown">
                    <button class="btnmunicipal btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
                        Välj Kommun
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu">
                        @GenerateDropdownContents()
                    </ul> 
                    @PerInhabitantButton()
                </div>
            }
            else
            {
                <div>
                    @PerInhabitantButton()
                </div>
            }
        </div>

        <div class="col-sm-8" style="padding-left:50px" color="#fff">
            <ul class="nav nav-tabs">
                @DisplayActive()
            </ul>
        </div>
    </div>

    <div class="row">
        <div class=" col-sm-4">
            @DisplaySVGMap()
            <div class="row" style="padding-left:50px;padding-bottom:20px">
                @if (Session["kommun"] == null)
                {
                    <h3>Jönköpings län</h3>
                }
                else
                {
                    <h3>@((string)Session["kommun"])</h3>
                }
                @DisplayEnergy()
                <br/>
            </div>
        </div>
    
        <div class="col-sm-8" color="#fff">
            <div style="padding-left:40px; padding-top:10px">
                <h2>Solfaktor:</h2>
                @DisplayWeatherQuality()
                <br/><br/><br/>
                @Timeinput()
            </div>
            @DisplayComparison()
        </div>
    </div>
</div>