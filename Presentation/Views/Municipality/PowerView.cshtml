@using Data
@using System.Resources
@using System.Globalization
@using System.Drawing;
@using System.Collections
@using Resources;

@model HandledMunicipalData

@{
    Dictionary<string, double> PowerDict = new Dictionary<string, double>();
    Dictionary<string, Dictionary<string, double>> monthPowerDict = new Dictionary<string, Dictionary<string, double>>();
    List<string> Kommuner = new List<string>() { "Aneby", "Tranås", "Nässjö", "Eksjö", "Vetlanda", "Sävsjö", "Värnamo", "Gislaved", "Gnosjö", "Vaggeryd", "Jönköping", "Habo", "Mullsjö" };

    var month = "";
    foreach (var elem in Kommuner)
    {
        PowerDict.Add(elem, 0);
    }
    foreach (var elem in Model.powerRecords)
    {
        if ((bool?)Session["perInhabitant"] == true)
        {
            PowerDict[elem.Kommun] += Math.Round(elem.Energi);
        }
        else
        {
            PowerDict[elem.Kommun] += Math.Round(elem.Energi / 1000);
        }
    }

    Dictionary<string, double> tempPowerDict = new Dictionary<string, double>();
    foreach (var elem in Model.powerRecords)
    {
        if (elem.Month != month)
        {
            tempPowerDict.Clear();
            foreach (var elem1 in Kommuner)
            {
                tempPowerDict.Add(elem1, 0);
            }
        }

        if ((bool?)Session["perInhabitant"] == false)
        {
            tempPowerDict[elem.Kommun] += Math.Round(elem.Energi / 1000);
        }
        else
        {
            tempPowerDict[elem.Kommun] += Math.Round(elem.Energi);
        }
        monthPowerDict[elem.Month] = new Dictionary<string, double>(tempPowerDict);
        month = elem.Month;
    }


}

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    google.charts.load("current", { packages: ['corechart'] });
    google.charts.setOnLoadCallback(drawChart);
    var data = null;
    var chart = null;
    var options = null;
    var ModelJson = @Html.Raw(Json.Encode(Model.powerRecords));
    var monthSummedList = []
    @foreach(var monthelem in monthPowerDict)

    {
        foreach(var record in monthelem.Value)
        {
            <text>
                monthSummedList.push({
                    month: "@monthelem.Key",
                    energy: @record.Value,
                    municipality: he.decode("@record.Key"),
                })
            </text>
        }
    }


    $("[type='number']").keypress(function (evt) {
        evt.preventDefault();
    });
    $(window).resize(function () {
        chart.draw(data, options);
    })


    function drawChart() {
        data = new google.visualization.DataTable();

        data.addColumn("string", "Kommun");
        @if((bool?)Session["perInhabitant"] == true) { <text>data.addColumn("number", "Wh");</text> }
        else { <text>data.addColumn("number", "Kwh");</text> }

        @foreach (var elem in PowerDict)
        {
            <text>
                var name = he.decode("@elem.Key")
                data.addRow([name,@elem.Value]);
            </text>
        }
        @if((bool?)Session["perInhabitant"] == true)
        {
            <text>
            options = {
                title: "Producerade kilowatttimmar",
            bar: { groupWidth: "50%" },
            legend: { position: "none" },
            animation:
                {
                    duration: 750,
                easing: 'out'
            },
            series: { 0: { color: 'green' } },
            vAxis: { minValue: 0, maxValue: 500 }
            };
            </text>
        }
        else
        {
            <text>
            options = {
                title: "Producerade kilowatttimmar",
            bar: { groupWidth: "50%" },
            legend: { position: "none" },
            animation:
                {
                    duration: 750,
                easing: 'out'
            },
            series: { 0: { color: 'green' } },
            vAxis: { minValue: 0, maxValue: 27500 }
            };
            </text>
        }

        chart = new google.visualization.ColumnChart(document.getElementById("columnchart_values"));
        chart.draw(data, options);
    }
    function changeChart() {
        var timeInput = document.getElementById("timeInput");
        var timeUnit = timeInput.value;
        data.removeRows(0, data.getNumberOfRows());
        if (timeUnit < 10) {
            timeUnit = "0" + timeUnit;
        }
        if ("@Session["chosenAction"]" == "ShowPowerOfMonth") {
            for (var i = 0; i < ModelJson.length; i++) {
                if (ModelJson[i].Day == timeUnit) {
                    if (ModelJson[i].Energi < 1000) {
                        data.addRow([ModelJson[i].Kommun, Math.round(ModelJson[i].Energi)]);
                    }
                    else {
                        data.addRow([ModelJson[i].Kommun, Math.round(ModelJson[i].Energi / 1000)]);
                    }

                }
            }
        }
        else if ("@Session["chosenAction"]" == "ShowPowerOfYear") {
            for (var i = 0; i < monthSummedList.length; i++) {
                if (monthSummedList[i].month == timeUnit) {
                    data.addRow([monthSummedList[i].municipality, monthSummedList[i].energy]);
                }
            }
        }
        chart.draw(data, options)
    }
</script>

@helper DisplayActive()
    {
        if ((string)Session["chosenACtion"] == "ShowPowerOfYear")
        {
            <li class="active"><a href="/Municipality/ShowPowerOfYear"> Senaste året </a></li>
        }
        else if ((string)Session["chosenACtion"] != "ShowPowerOfYear")
        {
            <li><a href="/Municipality/ShowPowerOfYear"> Senaste året </a></li>
        }
        if ((string)Session["chosenACtion"] == "ShowPowerOfMonth")
        {
            <li class="active"><a href="/Municipality/ShowPowerOfMonth"> Senaste månaden </a></li>
        }
        else if ((string)Session["chosenACtion"] != "ShowPowerOfMonth")
        {
            <li><a href="/Municipality/ShowPowerOfMonth"> Senaste månaden </a></li>
        }
        if ((string)Session["chosenACtion"] == "ShowPowerOfDay")
        {
            <li class="active"><a href="/Municipality/ShowPowerOfDay"> Igår </a></li>
        }
        else if ((string)Session["chosenACtion"] != "ShowPowerOfDay")
        {
            <li><a href="/Municipality/ShowPowerOfDay"> Igår </a></li>
        }
}

@helper RandomizeEq(double totalenergi, char prefix)
    {

string omvandling = "";
Random rnd = new Random();
int rand = rnd.Next(1, 4);
double times = 0;
if (prefix == 'k')
{
    switch (rand)
    {
        case 1:
            omvandling = " koppar kaffe";
            times = 40;
            break;
        case 2:
            omvandling = " timmar hårtork";
            times = 0.5;
            break;
        case 3:
            omvandling = " timmar mikrovågsugn";
            times = 0.7166;
            break;
    }
}
else if (prefix == 'm')
{
    switch (rand)
    {
        case 1:
            omvandling = " timmar med en vattenkokare";
            times = (0.45);
            break;
        case 2:
            omvandling = " timmar med en dammsugare";
            times = (0.8333);
            break;
        case 3:
            omvandling = " timmar med en induktionsspis";
            times = (0.55);
            break;
    }
}
else if (prefix == 'g')
{
    switch (rand)
    {
        case 1:
            omvandling = " timmar bastubad";
            times = 0.2;
            break;
        case 2:
            omvandling = " timmar med ett strykjärn";
            times = 0.4166;
            break;
        case 3:
            omvandling = " kg tvätt i en torktummlare";
            times = 1.2;
            break;
    }
}
else if (prefix == 'n')
{
    switch (rand)
    {
        case 1:
            omvandling = " timmar bastubad";
            times = 0.2;
            break;
        case 2:
            omvandling = " timmar med ett strykjärn";
            times = 0.4166;
            break;
        case 3:
            omvandling = " kg tvätt i en torktummlare";
            times = 1.2;
            break;
    }

}

    @Math.Round((totalenergi) * times, 0)@omvandling
}

@helper DisplayEnergy()
    {
        double totalenergi = 0;
        foreach (var elem in Model.powerRecords)
        {
            totalenergi += elem.Energi;
        }
        if ((string)Session["chosenACtion"] == "ShowPowerOfYear")
        {
            <h2> </h2>
        }
        else if ((string)Session["chosenACtion"] == "ShowPowerOfMonth")
        {
            <h2> </h2>
        }
        else if ((string)Session["chosenACtion"] == "ShowPowerOfDay")
        {
            <h2> </h2>
        }
        if (totalenergi > 1000000000)
        {
            <h2> @Math.Round(totalenergi / 1000000000, 2) GWh</h2>
            <h4 style="color:gray">Eller @RandomizeEq(totalenergi, 'g')</h4>
        }
        else if (totalenergi > 1000000)
        {
            <h2> @Math.Round(totalenergi / 1000000, 2) MWh</h2>
            <h4 style="color:gray">Eller @RandomizeEq(totalenergi, 'm')</h4>
        }
        else if (totalenergi > 1000)
        {
            <h2> @Math.Round(totalenergi / 1000, 1) kWh</h2>
            <h4 style="color:gray">Eller @RandomizeEq(totalenergi, 'k')</h4>
        }
        else if (totalenergi < 1000)
        {
            <h2> @Math.Round(totalenergi) Wh </h2>
            <h4 style="color:gray">Eller @RandomizeEq(totalenergi, 'n')</h4>
        }
}

@helper GenerateDropdownContents()
    {
        List<string> Kommuner = new List<string>() { "Aneby", "Gnosjö", "Tranås", "Nässjö", "Eksjö", "Vetlanda", "Sävsjö", "Värnamo", "Gislaved", "Vaggeryd", "Jönköping", "Habo", "Mullsjö", "Hela Länet" };

        foreach (var elem in Kommuner)
        {
            if (elem == "Hela Länet")
            {
                <li> <a href="/Municipality/ChooseMunicipality/"> @elem </a>  </li>
            }
            else
            {
                <li> <a href="/Municipality/ChooseMunicipality/@elem"> @elem </a>  </li>
            }
        }
}

@helper DisplayComparison()
    {
        <div id="columnchart_values"></div>
}

@helper ChartButton()
    {
        if ((bool?)Session["compare"] == true)
        {
            <a href="/Municipality/SetCompareMode/0" class="btnmunicipal btn btn-info" role="button">Dölj Diagram</a>
        }
        else
        {
            <a href="/Municipality/SetCompareMode/1" class="btnmunicipal btn btn-info" role="button">Visa Diagram</a>
        }
}

@helper DisplaySVGMap()
    {
        ResourceSet resourceSet = Resources.ResourceManager.GetResourceSet(CultureInfo.CurrentCulture, true, true);
        <svg style=" padding-top:10px; max-height:300px" version="1.1" viewBox="0 0 317.5 317.5" xmlns="http://www.w3.org/2000/svg" xlmns:xlink="http://www.w3.org/1999/xlink">
            <g transform="translate(82.124 203.78)" stroke-width="5.1371">
                @foreach (DictionaryEntry resource in resourceSet)
                {
                    if (resource.Value is string)
                    {
                        if ((string)Session["kommun"] == (string)resource.Key)
                        {
                            <a xlink:href="/Municipality/ChooseMunicipality/">
                                <title id="title">@resource.Key</title>
                                <path fill="rgb(58, 145, 63)" d="@resource.Value" />
                            </a>
                        }
                        else
                        {
                            <a xlink:href="/Municipality/ChooseMunicipality/@((string)resource.Key)">
                                <title id="title">@resource.Key</title>
                                <path fill="rgb(161, 216, 132)" d="@resource.Value" />
                            </a>
                        }
                    }
                }
            </g>
        </svg>
}

@helper Timeinput()
    {
        if ((string)Session["chosenAction"] == "ShowPowerOfYear" && (bool?)Session["compare"] == true)
        {
            <span class="text-info"> Month: </span> <input class="form-control" min="@Model.powerRecords.Min(x => x.Month)" max="@Model.powerRecords.Max(x => x.Month)" onchange="changeChart()" type="number" id="timeInput" style="max-width: 75px" />
        }
        if ((string)Session["chosenAction"] == "ShowPowerOfMonth" && (bool?)Session["compare"] == true)
        {
            <span class="text-info"> Day: </span> <input class="form-control" min="@Model.powerRecords.Min(x => x.Day)" max="@Model.powerRecords.Max(x => x.Day)" onchange="changeChart()" type="number" id="timeInput" style="max-width: 75px" />
        }
}

@helper DisplayWeatherQuality()
    {
        int maxWeatherRating = 5;
        ImageConverter converter = new ImageConverter();
        Bitmap sunImg = Resources.sun;
        byte[] imagebytes = (byte[])converter.ConvertTo(sunImg, typeof(byte[]));
        int weatherRating = Model.weatherRating;
        List<int> weatherRatingInts = new List<int>();

        for (var i = 0; i < maxWeatherRating; i++)
        {
            if (weatherRating - 100 >= 0)
            {
                <img src="@String.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(imagebytes))" class="img-responsive" style="filter: grayscale(0%); margin-right:5px; display:inline; max-width:35px; max-height:35px" />
                weatherRating -= 100;
            }
            else
            {
                <img src="@String.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(imagebytes))" class="img-responsive" style="filter: grayscale(@(100-weatherRating)%); margin-right:5px; display:inline; max-width:35px; max-height:35px" />
                weatherRating = 0;
            }
        }
}

@helper PerInhabitantButton()
    {
        if ((bool?)Session["perInhabitant"] == true)
        {
            <a class="btnmunicipal btn btn-info" role="button" href="/Municipality/PerInhabitant/false"> Se Totalt </a>
        }
        else
        {
            <a class="btnmunicipal btn btn-info" role="button" href="/Municipality/PerInhabitant/true"> Se Per Invånare </a>
        }
}

<div class="row container">
    <div class=" col-sm-4" style="padding-left: 15px">
        @if ((bool?)Session["compare"] == false || (bool?)Session["compare"] == null)
        {
            <div class="dropdown">
                <button class="btnmunicipal btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
                    Välj Kommun
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu">
                    @GenerateDropdownContents()
                </ul>
            </div>
            @DisplaySVGMap()
        }
        else
        {
            <div style="padding-top:34px">
                 @DisplaySVGMap()
            </div>
        }

        <button data-toggle="collapse" class="infobtncompany btn collapsed" style="padding-left:110px" data-target="#info"> Hur det fungerar </button>
        <div class="infodiv collapse" id="info">
            <p class="text-info">
                Observera att datan som presenteras på denna sida inte är fullständigt exakt och momentan.
                Observera att datan som presenteras på denna sida inte är fullständigt exakt och momentan.
            </p>
        </div>

    </div>
    <div class="col-sm-6" style="padding-left: 28px" color="#fff">
        <ul class="nav nav-tabs">
            @DisplayActive()
        </ul>

        @if ((bool?)Session["compare"] == true)
        {
            @DisplayComparison();
        }
        else
        {
            if (Session["kommun"] == null)
            {
                <h3>Jönköpings Län</h3>
            }
            else
            {
                <h3>@((string)Session["kommun"])</h3>
            }
            @DisplayEnergy()
        }
        <br />
        <div class="row" style="padding-bottom:50px">
            <div class="col-sm-6">
                @if ((bool?)Session["compare"] == false || (bool?)Session["compare"] == null)
                {
                    @DisplayWeatherQuality()
                }
            </div>
        </div>
    </div>
 
    <div class="col-sm-2">
        <div class="col"> @ChartButton() </div>
        <div class="row" style="padding:5px 0px 0px 15px">
                <div class="col"> @PerInhabitantButton() </div>
            </div>
            <div class="row" style="padding: 15px 0px 0px 15px">
                <div class="col"> @Timeinput() </div>
            </div>
    </div>

</div>